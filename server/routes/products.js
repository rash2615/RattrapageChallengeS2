/**
 * Routes des produits pour SPARK
 * Gestion du catalogue de produits tÃ©lÃ©phoniques
 */

const express = require('express')
const { body, query, validationResult } = require('express-validator')
const Product = require('../models/Product')
const { authenticate, authorize, optionalAuth } = require('../middleware/auth')

const router = express.Router()

/**
 * GET /api/products
 * RÃ©cupÃ©rer la liste des produits avec filtres et pagination
 */
router.get('/', [
  query('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('La page doit Ãªtre un entier positif'),
  query('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('La limite doit Ãªtre entre 1 et 100'),
  query('search')
    .optional()
    .trim()
    .isLength({ max: 100 })
    .withMessage('La recherche ne peut pas dÃ©passer 100 caractÃ¨res'),
  query('category')
    .optional()
    .isIn(['chargers', 'cases', 'cables', 'headphones', 'accessories'])
    .withMessage('CatÃ©gorie invalide'),
  query('brand')
    .optional()
    .trim()
    .isLength({ max: 50 })
    .withMessage('La marque ne peut pas dÃ©passer 50 caractÃ¨res'),
  query('minPrice')
    .optional()
    .isFloat({ min: 0 })
    .withMessage('Le prix minimum doit Ãªtre positif'),
  query('maxPrice')
    .optional()
    .isFloat({ min: 0 })
    .withMessage('Le prix maximum doit Ãªtre positif'),
  query('inStock')
    .optional()
    .isBoolean()
    .withMessage('inStock doit Ãªtre un boolÃ©en'),
  query('isFeatured')
    .optional()
    .isBoolean()
    .withMessage('isFeatured doit Ãªtre un boolÃ©en'),
  query('isOnSale')
    .optional()
    .isBoolean()
    .withMessage('isOnSale doit Ãªtre un boolÃ©en'),
  query('sort')
    .optional()
    .isIn(['name', '-name', 'price', '-price', 'createdAt', '-createdAt', 'rating', '-rating'])
    .withMessage('Tri invalide')
], async (req, res) => {
  try {
    // VÃ©rifier les erreurs de validation
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'ParamÃ¨tres invalides',
        details: errors.array(),
        timestamp: new Date().toISOString()
      })
    }

    const {
      page = 1,
      limit = 20,
      search,
      category,
      brand,
      minPrice,
      maxPrice,
      inStock,
      isFeatured,
      isOnSale,
      sort = '-createdAt'
    } = req.query

    // Construire les filtres
    const filters = { isActive: true }

    if (search) {
      filters.$text = { $search: search }
    }

    if (category) {
      filters.category = category
    }

    if (brand) {
      filters.brand = { $regex: brand, $options: 'i' }
    }

    if (minPrice || maxPrice) {
      filters.price = {}
      if (minPrice) filters.price.$gte = parseFloat(minPrice)
      if (maxPrice) filters.price.$lte = parseFloat(maxPrice)
    }

    if (inStock === 'true') {
      filters.stock = { $gt: 0 }
    }

    if (isFeatured === 'true') {
      filters.isFeatured = true
    }

    if (isOnSale === 'true') {
      filters.isOnSale = true
    }

    // Calculer la pagination
    const skip = (parseInt(page) - 1) * parseInt(limit)

    // Construire la requÃªte
    let query = Product.find(filters)

    // Appliquer le tri
    if (sort) {
      query = query.sort(sort)
    }

    // Appliquer la pagination
    query = query.skip(skip).limit(parseInt(limit))

    // ExÃ©cuter la requÃªte
    const [products, totalCount] = await Promise.all([
      query.populate('category').lean(),
      Product.countDocuments(filters)
    ])

    // Calculer les informations de pagination
    const totalPages = Math.ceil(totalCount / parseInt(limit))
    const hasNextPage = parseInt(page) < totalPages
    const hasPrevPage = parseInt(page) > 1

    res.json({
      products,
      pagination: {
        currentPage: parseInt(page),
        totalPages,
        totalItems: totalCount,
        itemsPerPage: parseInt(limit),
        hasNextPage,
        hasPrevPage
      },
      filters: {
        search,
        category,
        brand,
        minPrice: minPrice ? parseFloat(minPrice) : null,
        maxPrice: maxPrice ? parseFloat(maxPrice) : null,
        inStock: inStock === 'true',
        isFeatured: isFeatured === 'true',
        isOnSale: isOnSale === 'true',
        sort
      },
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration des produits:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la rÃ©cupÃ©ration des produits',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * GET /api/products/categories
 * RÃ©cupÃ©rer les catÃ©gories disponibles
 */
router.get('/categories', async (req, res) => {
  try {
    const categories = await Product.distinct('category', { isActive: true })
    
    const categoryInfo = {
      chargers: { name: 'Chargeurs', icon: 'ðŸ”Œ', description: 'Chargeurs rapides, sans fil et accessoires de charge' },
      cases: { name: 'Coques', icon: 'ðŸ“±', description: 'Coques de protection, Ã©tuis et films protecteurs' },
      cables: { name: 'CÃ¢bles', icon: 'ðŸ”—', description: 'CÃ¢bles USB-C, Lightning et micro-USB' },
      headphones: { name: 'Ã‰couteurs', icon: 'ðŸŽ§', description: 'Casques, Ã©couteurs Bluetooth et filaires' },
      accessories: { name: 'Accessoires', icon: 'ðŸ“¸', description: 'Supports, trÃ©pieds, batteries et accessoires photo' }
    }

    const categoriesWithInfo = categories.map(category => ({
      id: category,
      ...categoryInfo[category]
    }))

    res.json({
      categories: categoriesWithInfo,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration des catÃ©gories:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la rÃ©cupÃ©ration des catÃ©gories',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * GET /api/products/brands
 * RÃ©cupÃ©rer les marques disponibles
 */
router.get('/brands', async (req, res) => {
  try {
    const brands = await Product.distinct('brand', { isActive: true })
      .sort({ brand: 1 })

    res.json({
      brands,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration des marques:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la rÃ©cupÃ©ration des marques',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * GET /api/products/featured
 * RÃ©cupÃ©rer les produits mis en avant
 */
router.get('/featured', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 8

    const products = await Product.find({
      isActive: true,
      isFeatured: true
    })
    .sort({ createdAt: -1 })
    .limit(limit)
    .lean()

    res.json({
      products,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration des produits en vedette:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la rÃ©cupÃ©ration des produits en vedette',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * GET /api/products/popular
 * RÃ©cupÃ©rer les produits populaires
 */
router.get('/popular', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 8

    const products = await Product.getPopularProducts(limit)

    res.json({
      products,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration des produits populaires:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la rÃ©cupÃ©ration des produits populaires',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * GET /api/products/on-sale
 * RÃ©cupÃ©rer les produits en promotion
 */
router.get('/on-sale', async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 8

    const products = await Product.find({
      isActive: true,
      isOnSale: true,
      saleEndDate: { $gt: new Date() }
    })
    .sort({ createdAt: -1 })
    .limit(limit)
    .lean()

    res.json({
      products,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration des produits en promotion:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la rÃ©cupÃ©ration des produits en promotion',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * GET /api/products/:id
 * RÃ©cupÃ©rer un produit par son ID
 */
router.get('/:id', async (req, res) => {
  try {
    const product = await Product.findOne({
      _id: req.params.id,
      isActive: true
    }).lean()

    if (!product) {
      return res.status(404).json({
        error: 'Produit non trouvÃ©',
        message: 'Le produit demandÃ© n\'existe pas ou n\'est plus disponible',
        timestamp: new Date().toISOString()
      })
    }

    // RÃ©cupÃ©rer des produits similaires
    const similarProducts = await Product.find({
      _id: { $ne: product._id },
      category: product.category,
      isActive: true
    })
    .limit(4)
    .select('name brand price images ratings')
    .lean()

    res.json({
      product,
      similarProducts,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration du produit:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la rÃ©cupÃ©ration du produit',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * GET /api/products/slug/:slug
 * RÃ©cupÃ©rer un produit par son slug
 */
router.get('/slug/:slug', async (req, res) => {
  try {
    const product = await Product.findOne({
      slug: req.params.slug,
      isActive: true
    }).lean()

    if (!product) {
      return res.status(404).json({
        error: 'Produit non trouvÃ©',
        message: 'Le produit demandÃ© n\'existe pas ou n\'est plus disponible',
        timestamp: new Date().toISOString()
      })
    }

    res.json({
      product,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la rÃ©cupÃ©ration du produit par slug:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la rÃ©cupÃ©ration du produit',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * POST /api/products/search
 * Recherche avancÃ©e de produits
 */
router.post('/search', [
  body('query')
    .optional()
    .trim()
    .isLength({ max: 100 })
    .withMessage('La requÃªte ne peut pas dÃ©passer 100 caractÃ¨res'),
  body('filters')
    .optional()
    .isObject()
    .withMessage('Les filtres doivent Ãªtre un objet'),
  body('page')
    .optional()
    .isInt({ min: 1 })
    .withMessage('La page doit Ãªtre un entier positif'),
  body('limit')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('La limite doit Ãªtre entre 1 et 100')
], async (req, res) => {
  try {
    // VÃ©rifier les erreurs de validation
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'DonnÃ©es invalides',
        details: errors.array(),
        timestamp: new Date().toISOString()
      })
    }

    const { query, filters = {}, page = 1, limit = 20 } = req.body

    // Construire les filtres de recherche
    const searchFilters = {
      isActive: true,
      ...filters
    }

    // ExÃ©cuter la recherche
    const products = await Product.searchProducts(query, searchFilters)
      .skip((page - 1) * limit)
      .limit(limit)
      .lean()

    const totalCount = await Product.countDocuments(searchFilters)

    res.json({
      products,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalCount / limit),
        totalItems: totalCount,
        itemsPerPage: limit
      },
      searchQuery: query,
      filters,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la recherche:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la recherche',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * POST /api/products/:id/view
 * Enregistrer une vue d'un produit (pour les statistiques)
 */
router.post('/:id/view', optionalAuth, async (req, res) => {
  try {
    const product = await Product.findById(req.params.id)
    
    if (!product) {
      return res.status(404).json({
        error: 'Produit non trouvÃ©',
        message: 'Le produit demandÃ© n\'existe pas',
        timestamp: new Date().toISOString()
      })
    }

    // Ici on pourrait enregistrer la vue dans une collection sÃ©parÃ©e
    // ou mettre Ã  jour des statistiques de vue du produit
    // Pour l'instant, on retourne juste un succÃ¨s

    res.json({
      message: 'Vue enregistrÃ©e',
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de l\'enregistrement de la vue:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de l\'enregistrement de la vue',
      timestamp: new Date().toISOString()
    })
  }
})

// Routes d'administration (nÃ©cessitent une authentification admin)
/**
 * POST /api/products
 * CrÃ©er un nouveau produit (admin seulement)
 */
router.post('/', authenticate, authorize('admin'), [
  body('name')
    .trim()
    .isLength({ min: 3, max: 100 })
    .withMessage('Le nom doit contenir entre 3 et 100 caractÃ¨res'),
  body('description')
    .trim()
    .isLength({ min: 10, max: 1000 })
    .withMessage('La description doit contenir entre 10 et 1000 caractÃ¨res'),
  body('category')
    .isIn(['chargers', 'cases', 'cables', 'headphones', 'accessories'])
    .withMessage('CatÃ©gorie invalide'),
  body('brand')
    .trim()
    .isLength({ min: 2, max: 50 })
    .withMessage('La marque doit contenir entre 2 et 50 caractÃ¨res'),
  body('price')
    .isFloat({ min: 0, max: 10000 })
    .withMessage('Le prix doit Ãªtre entre 0 et 10000'),
  body('stock')
    .isInt({ min: 0 })
    .withMessage('Le stock doit Ãªtre un entier positif')
], async (req, res) => {
  try {
    // VÃ©rifier les erreurs de validation
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'DonnÃ©es invalides',
        details: errors.array(),
        timestamp: new Date().toISOString()
      })
    }

    const productData = req.body
    productData.createdBy = req.user._id

    const product = new Product(productData)
    await product.save()

    res.status(201).json({
      message: 'Produit crÃ©Ã© avec succÃ¨s',
      product,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la crÃ©ation du produit:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la crÃ©ation du produit',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * PUT /api/products/:id
 * Mettre Ã  jour un produit (admin seulement)
 */
router.put('/:id', authenticate, authorize('admin'), async (req, res) => {
  try {
    const product = await Product.findById(req.params.id)
    
    if (!product) {
      return res.status(404).json({
        error: 'Produit non trouvÃ©',
        message: 'Le produit demandÃ© n\'existe pas',
        timestamp: new Date().toISOString()
      })
    }

    // Mettre Ã  jour les champs fournis
    Object.keys(req.body).forEach(key => {
      if (req.body[key] !== undefined) {
        product[key] = req.body[key]
      }
    })

    product.updatedBy = req.user._id
    await product.save()

    res.json({
      message: 'Produit mis Ã  jour avec succÃ¨s',
      product,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la mise Ã  jour du produit:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la mise Ã  jour du produit',
      timestamp: new Date().toISOString()
    })
  }
})

/**
 * DELETE /api/products/:id
 * Supprimer un produit (admin seulement)
 */
router.delete('/:id', authenticate, authorize('admin'), async (req, res) => {
  try {
    const product = await Product.findById(req.params.id)
    
    if (!product) {
      return res.status(404).json({
        error: 'Produit non trouvÃ©',
        message: 'Le produit demandÃ© n\'existe pas',
        timestamp: new Date().toISOString()
      })
    }

    // Soft delete - dÃ©sactiver au lieu de supprimer
    product.isActive = false
    product.deletedBy = req.user._id
    product.deletedAt = new Date()
    await product.save()

    res.json({
      message: 'Produit supprimÃ© avec succÃ¨s',
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Erreur lors de la suppression du produit:', error)
    res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la suppression du produit',
      timestamp: new Date().toISOString()
    })
  }
})

module.exports = router
